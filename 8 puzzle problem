import heapq
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]  
def find_empty(puzzle):
    for i in range(len(puzzle)):
        for j in range(len(puzzle[i])):
            if puzzle[i][j] == 0:
                return i, j
def manhattan_distance(puzzle):
    distance = 0
    for i in range(3):
        for j in range(3):
            value = puzzle[i][j]
            if value != 0:
                target_x = (value - 1) // 3
                target_y = (value - 1) % 3
                distance += abs(i - target_x) + abs(j - target_y)
    return distance
def generate_moves(puzzle):
    moves = []
    x, y = find_empty(puzzle)
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

    for dx, dy in directions:
        new_x, new_y = x + dx, y + dy
        if 0 <= new_x < 3 and 0 <= new_y < 3:
            new_puzzle = [row[:] for row in puzzle]
            # Swap empty space with the adjacent number
            new_puzzle[x][y], new_puzzle[new_x][new_y] = new_puzzle[new_x][new_y], new_puzzle[x][y]
            moves.append(new_puzzle)

    return moves
def a_star(start_state):
    visited = set()
    priority_queue = []
    heapq.heappush(priority_queue, (manhattan_distance(start_state), 0, start_state, []))  # (priority, cost, state, path)

    while priority_queue:
        _, cost, current_state, path = heapq.heappop(priority_queue)

        if current_state == goal_state:
            return path  

        visited.add(tuple(tuple(row) for row in current_state))

        for move in generate_moves(current_state):
            if tuple(tuple(row) for row in move) not in visited:
                new_cost = cost + 1
                priority = new_cost + manhattan_distance(move)
                heapq.heappush(priority_queue, (priority, new_cost, move, path + [move]))

    return None  


def print_puzzle(puzzle):
    for row in puzzle:
        print(row)
    print()


start_state = [[1, 2, 3],
               [4, 0, 5],
               [7, 8, 6]]


solution = a_star(start_state)

if solution:
    print("Solution found!")
    print("Steps to solve the puzzle:")
    for step in solution:
        print_puzzle(step)
else:
    print("No solution found.")
