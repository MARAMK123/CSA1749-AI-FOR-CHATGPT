from collections import deque


start_state = (3, 3, 1)  
goal_state = (0, 0, 0)   


def is_valid(state):
    missionaries_left, cannibals_left, boat = state
    missionaries_right = 3 - missionaries_left
    cannibals_right = 3 - cannibals_left

    if (missionaries_left >= 0 and cannibals_left >= 0 and
        missionaries_right >= 0 and cannibals_right >= 0 and
        (missionaries_left == 0 or missionaries_left >= cannibals_left) and
        (missionaries_right == 0 or missionaries_right >= cannibals_right)):
        return True
    return False


def get_next_states(state):
    missionaries_left, cannibals_left, boat = state
    next_states = []
    moves = [(1, 0), (0, 1), (1, 1), (2, 0), (0, 2)]  

    if boat == 1:  
        for missionaries_move, cannibals_move in moves:
            new_state = (missionaries_left - missionaries_move,
                         cannibals_left - cannibals_move,
                         0)  
            if is_valid(new_state):
                next_states.append(new_state)
    else:  
        for missionaries_move, cannibals_move in moves:
            new_state = (missionaries_left + missionaries_move,
                         cannibals_left + cannibals_move,
                         1)  
            if is_valid(new_state):
                next_states.append(new_state)

    return next_states


def bfs():
    queue = deque([(start_state, [])])  
    visited = set()  

    while queue:
        current_state, path = queue.popleft()

        if current_state == goal_state:
            return path + [current_state]  

        if current_state in visited:
            continue

        visited.add(current_state)

        for next_state in get_next_states(current_state):
            queue.append((next_state, path + [current_state]))

    return None  


def print_solution(solution):
    for step in solution:
        missionaries_left, cannibals_left, boat = step
        missionaries_right = 3 - missionaries_left
        cannibals_right = 3 - cannibals_left
        boat_side = "left" if boat == 1 else "right"
        print(f"Left: {missionaries_left} missionaries, {cannibals_left} cannibals | "
              f"Boat on the {boat_side} | Right: {missionaries_right} missionaries, {cannibals_right} cannibals")


def main():
    solution = bfs()

    if solution:
        print("\nSolution found:")
        print_solution(solution)
    else:
        print("\nNo solution exists.")

if __name__ == "__main__":
    main()
